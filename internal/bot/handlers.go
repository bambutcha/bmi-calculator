package bot

import (
	"fmt"
	"strconv"

	"github.com/bambutcha/bmi-calculator/internal/bmi"
	"github.com/bambutcha/bmi-calculator/internal/fsm"
	"github.com/bambutcha/bmi-calculator/pkg/keyboard"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

func (b *Bot) handleMessage(message *tgbotapi.Message) {
	if message.IsCommand() {
		if message.Command() == "start" {
			b.handleStart(message)
		}
		return
	}

	state := b.storage.GetState(message.Chat.ID)
	if state == nil {
		return
	}

	switch state.State {
	case fsm.WaitingForHeight:
		b.handleHeight(message)
	case fsm.WaitingForWeight:
		b.handleWeight(message)
	}
}

func (b *Bot) handleStart(message *tgbotapi.Message) {
	msg := tgbotapi.NewMessage(message.Chat.ID,
		"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Å—Å—ã —Ç–µ–ª–∞ (–ò–ú–¢).\n\n"+
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")

	b.storage.SetState(message.Chat.ID, fsm.NewUserState())
	b.API.Send(msg)
}

func (b *Bot) handleHeight(message *tgbotapi.Message) {
	height, err := strconv.ParseFloat(message.Text, 64)
	if err != nil || height <= 0 || height > 250 {
		msg := tgbotapi.NewMessage(message.Chat.ID,
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ—Å—Ç–∞ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 1 –¥–æ 250):")
		b.API.Send(msg)
		return
	}

	state := b.storage.GetState(message.Chat.ID)
	state.Height = height
	state.State = fsm.WaitingForWeight
	b.storage.SetState(message.Chat.ID, state)

	msg := tgbotapi.NewMessage(message.Chat.ID,
		"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):")
	b.API.Send(msg)
}

func (b *Bot) handleWeight(message *tgbotapi.Message) {
	weight, err := strconv.ParseFloat(message.Text, 64)
	if err != nil || weight <= 0 || weight > 500 {
		msg := tgbotapi.NewMessage(message.Chat.ID,
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–æ—Ç 1 –¥–æ 500):")
		b.API.Send(msg)
		return
	}

	state := b.storage.GetState(message.Chat.ID)
	bmi, category := bmi.CalculateBMI(state.Height, weight)

	msg := tgbotapi.NewMessage(message.Chat.ID,
		fmt.Sprintf("–í–∞—à –ò–ú–¢: %.2f\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n\n–•–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢ —Å–Ω–æ–≤–∞?",
			bmi, category))
	msg.ReplyMarkup = keyboard.GetRestartInlineKeyboard()
	b.API.Send(msg)

	b.storage.ClearState(message.Chat.ID)
}

func (b *Bot) handleCallback(callback *tgbotapi.CallbackQuery) {
	switch callback.Data {
	case "restart":
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID,
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
		b.storage.SetState(callback.Message.Chat.ID, fsm.NewUserState())
		b.API.Send(msg)
	case "end":
		msg := tgbotapi.NewMessage(callback.Message.Chat.ID,
			"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢ —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
		b.API.Send(msg)
	}
	b.API.AnswerCallbackQuery(tgbotapi.NewCallback(callback.ID, ""))
}
